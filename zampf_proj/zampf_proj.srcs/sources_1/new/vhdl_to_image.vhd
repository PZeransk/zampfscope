----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 12.11.2023 12:43:24
-- Design Name: 
-- Module Name: vhdl_to_image - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.all;
use std.textio.all;
use ieee.std_logic_textio.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity vhdl_to_image is
GENERIC(
	C_image_legnth : integer := 307200
	);

--  Port ( );
end vhdl_to_image;

architecture Behavioral of vhdl_to_image is

signal clk 			: std_logic := '0';
signal pixel_clk 	: std_logic := '0';
signal rst 			: std_logic := '0';
signal enable 		: std_logic := '1';
signal trigger 		: std_logic := '0';


signal o_h_sync  	: std_logic;
signal o_v_sync  	: std_logic;
signal o_disp_ena	: std_logic;
signal o_r_sig		: std_logic_vector(2 downto 0);
signal o_b_sig		: std_logic_vector(2 downto 0);
signal o_g_sig		: std_logic_vector(2 downto 0);
signal o_new_line 	: std_logic;
signal v_sync_cnt 	: integer range 0 to 3 := 0;

signal image_cnt 	: integer range 0 to C_image_legnth := 0;

constant clock_period 		: time := 10 ns; 
constant pixel_clk_period	: time := 40 ns;
begin


clk <= not clk after clock_period/2;
pixel_clk <= not pixel_clk after pixel_clk_period/2;

dut: ENTITY work.TOP
PORT MAP(
	i_clk 			=> clk,
	i_reset 	 	=> rst,
	i_enable_spi 	=> enable,
	i_trigger_n		=> trigger,
	o_h_sync   		=> o_h_sync,
	o_v_sync   		=> o_v_sync,
	o_disp_ena 		=> o_disp_ena,
	o_r_sig			=> o_r_sig,
	o_b_sig			=> o_b_sig,
	o_g_sig			=> o_g_sig,
	o_new_line		=> o_new_line
	);





file_save : process(pixel_clk, o_new_line, o_v_sync)

    file     response_file     : text;
    constant response_filename : string  := "image_out.ppm";
    variable l_o               : line;
    variable response_status   : file_open_status;
    variable x_size            : integer := 640;
    variable y_size            : integer := 480;
    variable x, y              : integer;
begin



	if(image_cnt = 0) then 
    file_open(response_status, response_file, response_filename, write_mode);
    write (l_o, string'("P3"));       -- magic number
    writeline(response_file, l_o);        
    write (l_o, string'("# generated by VHDL testbench"));       -- comment
    writeline(response_file, l_o);
    write (l_o, string'("# created by Przemyslawwo vhdllo goddini"));       -- comment
    writeline(response_file, l_o);
    write (l_o, string'("# everything fixed to be proper ppm file spec by Michaello angello"));       -- comment
    writeline(response_file, l_o);        
    write (l_o, x_size);
    write (l_o, string'(" "));
    write (l_o, y_size);
    writeline(response_file, l_o);        
    write (l_o, string'("8"));       -- maximum value
    writeline(response_file, l_o);  
    end if;
        
    if(rising_edge(pixel_clk) AND o_new_line = '1') then
    	if(image_cnt <= C_image_legnth) then
            write (l_o, to_integer(unsigned(o_r_sig)));
            write (l_o, string'(" "));
            write (l_o, to_integer(unsigned(o_g_sig)));
            write (l_o, string'(" "));
            write (l_o, to_integer(unsigned(o_b_sig))); -- x_counter
            write (l_o, string'("  "));
            write (response_file, l_o.all);
            deallocate(l_o);
            --l_o := new string'("");
            --write (response_file, string(l_o));
            --l_o'clear;
            image_cnt <= image_cnt + 1;
            
            if(image_cnt mod x_size = 0 and image_cnt /= 0) then
                write(response_file, (1 => LF));
            end if;
        else
    		file_close(response_file);
    		assert false
    		  report "Simulation completed"
    		  severity failure;        	
    	end if;

    end if; 



--    -- write pixel to file
--    for y in 0 to y_size-1 loop
--    wait until rising_edge(o_new_line); -- begin of line
--
--      for x in 0 to x_size-1 loop
--      if(falling_edge(pixel_clk)) then -- middle of clock cycle
--
--        write (l_o, to_integer(unsigned(o_r_sig)));
--        write (l_o, string'(" "));
--        write (l_o, to_integer(unsigned(o_g_sig)));
--        write (l_o, string'(" "));
--        write (l_o, to_integer(unsigned(o_b_sig)));
--        writeline(response_file, l_o);        
--       	end if;
--        end loop;  -- x
--    end loop;  -- y
--
--
--
--    file_close(response_file);
--    assert false
--      report "Simulation completed"
--      severity failure;


end process; -- file_save

end Behavioral;
